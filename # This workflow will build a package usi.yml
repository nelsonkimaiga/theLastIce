# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Build and Deploy GFGP Spring Boot Microservices

on:
  push:
    branches:
      - main

env:
  DOCKER_USERNAME: nelsonkimaiga
  DOCKER_PASSWORD: 303Seminarian!
  SSH_PORT: 22

  SSH_PASS: ${{ secrets.DROPLET_SSH_KEY }}
  SSH_HOST: ${{ secrets.DROPLET_IP }}
  SSH_USER: ${{ secrets.DROPLET_USER }}
  CONTAINER_NAME: grants-management-app
  IMAGE_NAME: nelsonkimaiga/grants-management-app:latest

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Build & push Docker image
        run: |
          echo '${{ env.DOCKER_PASSWORD }}' | docker login -u ${{ env.DOCKER_USERNAME }} --password-stdin
          docker buildx create --use --name workflowBuilder
          docker buildx build --platform=linux/amd64,linux/arm64 -t ${{ env.IMAGE_NAME }} --push .
          docker logout
  deploy_dev:
    runs-on: ubuntu-latest
    needs: build
    environment: development
    steps:
      - name: Setup SSH keys
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DROPLET_SSH_KEY }}

      - name: Remote ssh to server and update GFGP API server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          port: ${{ env.SSH_PORT }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script_stop: true
          script: |
            if docker ps -a --format '{{.Names}}' | grep -q ${{ env.CONTAINER_NAME }}; then
              echo "Check 1"
              docker stop ${{ env.CONTAINER_NAME }}
              docker rm ${{ env.CONTAINER_NAME }}
            fi
            docker pull --quiet ${{ env.IMAGE_NAME }}
            if [ $? -eq 0 ]; then
              echo "Docker image ${{ env.IMAGE_NAME }} pulled successfully"
            else
              echo "Error: Failed to pull Docker image ${{ env.IMAGE_NAME }}"
              exit 1
            fi
            docker run -d --name ${{ env.CONTAINER_NAME }} -p 8090:8090 ${{ env.IMAGE_NAME }}
            docker logout
            sleep 10